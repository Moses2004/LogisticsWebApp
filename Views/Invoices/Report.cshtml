@model LogisticsWebApp.Models.ViewModels.InvoiceReportViewModel

@{
    ViewData["Title"] = "Invoice Report";
}

<h1>Invoice Report</h1>

<hr />

<div class="row">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Total Invoices
            </div>
            <div class="card-body">
                <h5 class="card-title">@Model.TotalInvoices</h5>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Total Revenue
            </div>
            <div class="card-body">
                <h5 class="card-title">$@Model.TotalRevenue.ToString("N2")</h5>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Export Options
            </div>
            <div class="card-body">
                <a asp-action="ExportToExcel" class="btn btn-success">
                    <i class="fas fa-file-excel"></i> Export to Excel
                </a>
            </div>
        </div>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-md-6">
        <h3>Invoices by Payment Status</h3>
        <canvas id="invoicesByStatusChart"></canvas>
    </div>
    <div class="col-md-6">
        <h3>Revenue by Payment Status</h3>
        <canvas id="revenueByStatusChart"></canvas>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-md-6">
        <h3>Invoices by Customer</h3>
        <canvas id="invoicesByCustomerChart"></canvas>
    </div>
    <div class="col-md-6">
        <h3>Revenue by Customer</h3>
        <canvas id="revenueByCustomerChart"></canvas>
    </div>
</div>

<hr />



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Data for Invoices by Status Chart
        var invoicesByStatusLabels = @Html.Raw(Json.Serialize(Model.InvoicesByStatus.Keys));
        var invoicesByStatusData = @Html.Raw(Json.Serialize(Model.InvoicesByStatus.Values));

        var invoicesByStatusCtx = document.getElementById('invoicesByStatusChart').getContext('2d');
        var invoicesByStatusChart = new Chart(invoicesByStatusCtx, {
            type: 'bar', //  can change this to 'pie', 'doughnut', etc.
            data: {
                labels: invoicesByStatusLabels,
                datasets: [{
                    label: '# of Invoices',
                    data: invoicesByStatusData,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.5)',
                        'rgba(54, 162, 235, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(75, 192, 192, 0.5)',
                        'rgba(153, 102, 255, 0.5)',
                        'rgba(255, 159, 64, 0.5)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Data for Revenue by Status Chart
        var revenueByStatusLabels = @Html.Raw(Json.Serialize(Model.RevenueByStatus.Keys));
        var revenueByStatusData = @Html.Raw(Json.Serialize(Model.RevenueByStatus.Values));

        var revenueByStatusCtx = document.getElementById('revenueByStatusChart').getContext('2d');
        var revenueByStatusChart = new Chart(revenueByStatusCtx, {
            type: 'bar',
            data: {
                labels: revenueByStatusLabels,
                datasets: [{
                    label: 'Revenue ($)',
                    data: revenueByStatusData,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.5)',
                        'rgba(54, 162, 235, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(75, 192, 192, 0.5)',
                        'rgba(153, 102, 255, 0.5)',
                        'rgba(255, 159, 64, 0.5)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Data for Invoices by Customer Chart
        var invoicesByCustomerLabels = @Html.Raw(Json.Serialize(Model.InvoicesByCustomer.Keys));
        var invoicesByCustomerData = @Html.Raw(Json.Serialize(Model.InvoicesByCustomer.Values));

        var invoicesByCustomerCtx = document.getElementById('invoicesByCustomerChart').getContext('2d');
        var invoicesByCustomerChart = new Chart(invoicesByCustomerCtx, {
            type: 'bar',
            data: {
                labels: invoicesByCustomerLabels,
                datasets: [{
                    label: '# of Invoices',
                    data: invoicesByCustomerData,
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Data for Revenue by Customer Chart
        var revenueByCustomerLabels = @Html.Raw(Json.Serialize(Model.RevenueByCustomer.Keys));
        var revenueByCustomerData = @Html.Raw(Json.Serialize(Model.RevenueByCustomer.Values));

        var revenueByCustomerCtx = document.getElementById('revenueByCustomerChart').getContext('2d');
        var revenueByCustomerChart = new Chart(revenueByCustomerCtx, {
            type: 'bar',
            data: {
                labels: revenueByCustomerLabels,
                datasets: [{
                    label: 'Revenue ($)',
                    data: revenueByCustomerData,
                    backgroundColor: 'rgba(153, 102, 255, 0.5)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // New: Data for Revenue by Month Chart
        var revenueByMonthLabels = @Html.Raw(Json.Serialize(Model.RevenueByMonth.Keys));
        var revenueByMonthData = @Html.Raw(Json.Serialize(Model.RevenueByMonth.Values));

        var revenueByMonthCtx = document.getElementById('revenueByMonthChart').getContext('2d');
        var revenueByMonthChart = new Chart(revenueByMonthCtx, {
            type: 'doughnut', // This creates the circle chart
            data: {
                labels: revenueByMonthLabels,
                datasets: [{
                    label: 'Revenue ($)',
                    data: revenueByMonthData,
                    backgroundColor: [ // Add more colors as needed for more months
                        'rgba(255, 99, 132, 0.5)', // Red
                        'rgba(54, 162, 235, 0.5)', // Blue
                        'rgba(255, 206, 86, 0.5)', // Yellow
                        'rgba(75, 192, 192, 0.5)', // Green
                        'rgba(153, 102, 255, 0.5)', // Purple
                        'rgba(255, 159, 64, 0.5)', // Orange
                        'rgba(192, 192, 192, 0.5)', // Grey
                        'rgba(102, 204, 153, 0.5)', // Mint green
                        'rgba(255, 102, 204, 0.5)', // Pink
                        'rgba(0, 102, 102, 0.5)', // Dark teal
                        'rgba(204, 204, 0, 0.5)', // Olive
                        'rgba(153, 51, 0, 0.5)' // Brown
                    ],
                    borderColor: [ // Match border colors for consistency
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(192, 192, 192, 1)',
                        'rgba(102, 204, 153, 1)',
                        'rgba(255, 102, 204, 1)',
                        'rgba(0, 102, 102, 1)',
                        'rgba(204, 204, 0, 1)',
                        'rgba(153, 51, 0, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed !== null) {
                                    label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed);
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });

    </script>
}